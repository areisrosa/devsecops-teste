name: Deploy Workflows
run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ
on: [push]
jobs:
  continuous_integration:
    name: Check code
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      - run: echo "üçè This job's status is ${{ job.status }}."
  unit_test:
    name: Run unit tests
    needs: continuous_integration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          registry-url: 'https://registry.npmjs.org'
      - name: Install modules and run tests in app1
        run: |
          cd ${{ github.workspace }}/app1
          npm install
          npx jest --forceExit
  snyk:
   needs: continuous_integration
   name: Scan vulnerabilities in app
   runs-on: ubuntu-latest
   steps:
     - uses: actions/checkout@master
     - uses: actions/setup-node@v3
       with:
         node-version: '22.x'
         registry-url: 'https://registry.npmjs.org'
     - uses: snyk/actions/setup@master
     - name: Run snyk auth
       run: snyk auth ${{ secrets.SNYK_TOKEN }}
     - name: Run snyk code test
       run: snyk test --severity-threshold=high ${{ github.workspace }}/app2
     - name: Run snyk open source monitor
       run: snyk monitor --all-projects ${{ github.workspace }}/app2
     - name: Build a docker image
       run: |
          cd ${{ github.workspace }}/app1
          docker build -t junto-app1 .
     - name: Run snyk to check docker image for vulnerabilities
       continue-on-error: true
       uses: snyk/actions/docker@master
       with:
        image: junto-app1
        args: --file=Dockerfile
  trivy:
   name: Scan vulnerabilities in docker
   needs: continuous_integration
   runs-on: ubuntu-latest
   steps:
     - uses: actions/checkout@master
     - name: Build an image from dockerfile
       run: |
          cd ${{ github.workspace }}/app1
          docker build -t junto-app1 .
     - name: Run trivy vulnerability scanner
       uses: aquasecurity/trivy-action@0.20.0
       with:
         image-ref: junto-app1
         format: 'table'
         exit-code: '1'
         ignore-unfixed: true
         vuln-type: 'os,library'
         severity: 'CRITICAL'
  continuous_delivery:
    needs: [continuous_integration, unit_test, snyk, trivy]
    name: Build application on EC2 üöÄ
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          registry-url: 'https://registry.npmjs.org'
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Install modules and build app1
        run: |
          ls -la
          cd $HOME/devsecops-teste/app1
          npm install
      - name: Run build application
        run: |
          docker build -t junto-app1 .
          docker run -d -p 80:80 junto-app1
  testing:
    needs: [continuous_integration, unit_test, snyk, trivy, continuous_delivery]
    name: Run deployment testing on EC2 üöÄ
    runs-on: ubuntu-latest
    environment: testing
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Deploy to testing
        run: |
            aws deploy create-deployment \
            --application-name junto-app \
            --deployment-group-name AppDeploymentGroupName \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --github-location repository=${{ github.repository }},commitId=${{ github.sha }}
  production:
   needs: [continuous_integration, unit_test, snyk, trivy, continuous_delivery, testing]
   if: github.ref == 'refs/heads/main'
   name: Run deployment production on EC2 üöÄ
   runs-on: ubuntu-latest
   environment: production
   steps:
     - uses: actions/checkout@v2
     - name: Configure AWS credentials
       uses: aws-actions/configure-aws-credentials@v1
       with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
     - name: Deploy to production
       run: |
        aws deploy create-deployment \
         --application-name junto-app \
         --deployment-group-name AppDeploymentGroupName \
         --deployment-config-name CodeDeployDefault.OneAtATime \
         --github-location repository=${{ github.repository }},commitId=${{ github.sha }}